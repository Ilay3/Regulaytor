/*****************************************************************************************
******************************************************************************************
**		Этот модуль содержит структуру, которая позволяет рапознать текст ошибки,
**	ее приоритет, и была ли эта ошибка обработана.
**		Появилась возможность вызывать внешнюю функцию при наступлении ошибки, что
**	упростило процесс создания новых приложений
**		Появилась возможность отправлять родительскому окну сообщение MSG_ER_ERROR, 
**	когда пришла очередная ошибка.
********************************************************************************************
*******************************************************************************************/

/************* ЛИСТ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ **********************************************
*	29,09,2006	-	создан этот файл
*	12.10,2006 - + Теперь этот файл стал глобальным и находится в одной овщей для 
*	всех библиотек директории
*	14.04.2007 - добавлен вызов фукции ErrorServ и все, что с ней связано
*	18.04.2007 - исправлен глюк с инициализацией ErrorServ
*	29.04.2007 - добавлена возможность MSG_ER_ERROR
*	22.06.2007 - при отправке MSG_ER_ERROR PostMessage была заменена на SendMessage,
*					чтобы сообщения не подменяли друг друга, а обрабатывались сразу
*	11.12.2008 - добавлена возможность вставлять заголовок MessageBox-а
*	24.12.2008 - поработал с заголовками MessageBox-а
****************************************************************************************/
#pragma once
#include <windows.h>	//для отправки сообщений

/***************	РАСШИФРОВКА ПРИОРИТЕТОВ	**********************************************
*	В принципе этот класс только передает приоритеты дальше к обрабатываемой программе
*****************************************************************************************/
/* Далее идет так, первые 4 бита (всего 16 значений) отвечаю собсно за приоритет. 
Причем
	0 - ну ОХРЕНЕННО хороший результат
	7 - простое мимолетное (но успешное) сообщение
	8 - простое мимолетное (но предупреждающее) сообщение
	15 - полный кранты
*/
#define ERP_VERYGOOD	0
#define ERP_GOOD		4
#define ERP_NORMAL		7
#define ERP_WATCHFUL	8
#define ERP_WARNING		10
#define ERP_ERROR		12
#define ERP_FATALERROR	15


/***************     ДОПОЛНИТЕЛЬНЫЙ ФЛАГИ   *********************************************/
#define ER_WRITE_TO_LOG		0x80	//Если в 7 бите (начиная с нуля) стоит 1, то нужно еще писать и в файл (LogFile)
#define ER_SHOW_MESSAGE		0x40	//Помимо отображения в строке состояния нужно еще и показать MessageBox
#define ER_HIDE_FROM_USER	0x20	//Сообщение не будет отображено на панели состояния программы

/*Сколько я ни маялся, но отправка сообщения ON_NOTIFY не 
получается (вернее не получается прием. Поэтому обойдемся
обычным WM_USER
*/
#define MSG_ER_ERROR (WM_USER+25)	//это сообщение отправляется, когда поступула очередная ошибка
//ДЕЙСТВИЯ ПО ДОБАВЛЕНИЮ ОБРАБОТЧИКА
//	1. Добавить ON_MESSAGE(MSG_ER_ERROR,ShowError)
//	2. Добавить LRESULT ДИАЛОГ::ShowError(WPARAM w, LPARAM l)
//	3. из l извлечь указатель на объект ошибки
//	4. Работать с ним

class ERROR_Class
{
	CString			m_sLastError;			//текст ошибки
	CString			m_sLastTitle;			//заголовок ошибки (если есть) - отображается сверху MessageBox-а
	void (*ErrorServ)(ERROR_Class *error);	//указатель на фукцию, которая будет вызываться при поступлении очередной ошибки  
	CWnd *m_pParent;						//указатель на окно родителя
public:
    ERROR_Class();
	//функция инициализирует класс ошибки
	bool InitERROR(void (*error_serv)(ERROR_Class *error),CWnd* pParent=NULL);
	CString GetLastError();			//выдает текст последней происшедшей ошибки
	unsigned char	m_iPriority;	//ее приоритет
	bool			m_bNew;			//была ли она уже обработана
	void SetERROR(CString error, unsigned char priority, TCHAR* Title=NULL);	//ускоренное добавление новой ошибки
};



