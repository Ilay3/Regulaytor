/*****************************************************************************************
******************************************************************************************
**		Этот модуль импортирует данные из кучки RadioButton переменную главного класса.
**	Таким образом решается проблема выбора ТОЛЬКО одной из нескольких опций
*******************************************************************************************
*******************************************************************************************/

/**************************		ЛИСТ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ	*********************************
*	1.12.2006 - создан
*********************************************************************************************/
#pragma once
#include <ERRORS\ERRORS.h>
#include "vector"
using namespace std;

class CSimple_RadioButton_source
{
	unsigned char m_value;	//здесь будет содержаться номер выбранного радиобаттона, таким образом и 
							//осуществляется, что в каждый момент может быть выбран только один элемент
							//а его код - это то, что нужно знать управляющей программе
							//видно, что максимальное число радиобаттонов - 255
							//если не выбран ни один радиобаттона, то m_value==0
public:
	vector < CButton* , allocator < CButton* > > m_sources;	//источники радиобаттонов на экране
	
	CSimple_RadioButton_source();
	~CSimple_RadioButton_source();

	ERROR_Class		m_Error;		//структура с последней происшедшей ошибкой
	CString			m_sName;		//имя этой группы радиобаттонов

	unsigned char	GetValue();		//возвращает текущее значение m_value

	//выставить одним махом все опции
	bool			SetAllValues(CString name,unsigned char value);

	bool			ReadValueFromWindow();	//эта функция считывает все радиобаттоны, смотрит, какой из них выбран
											//и устанавливает новое значение m_value
	
	bool			SetValue(unsigned char value);	//заносит полученное в качестве аргумента значение в 
													//переменную m_value и параллельно отмечает нужный элемент в окне

	//а это указатель на функцию, которая будет вызываться при поступлении
	//нового значения (конечно, если только указатель не нулевой)
	//сделана она для того, чтобы пользователь имел возможность 
	//провести какие-то дополнительный действия, сразу после обновления значения
	void			(*ComeNewValue)	(void);
};