/*********************************************************************************
*********************************************************************************
**		Этот модуль призван избавить от рутинной работы по обслуживанию
**	каждого CheckBoxa с флагами в отдельности, а также ряда попутных проблем
***********************************************************************************
***********************************************************************************/

/*******************  ЛИСТ РЕГИСТРАЦИИ ИЗМЕНЕНИЙ  ***********************************
*	16.11.2006 - первая работающая версия. 
*	17.11.2006 - добавлен указатель на функцию ComeNewValue
*	31.01.2007 - все достало, поэтому введена функция ReadValueFromWindow
*	1.02.2007 - функция SetValue теперь корректно возвращает значение
*				исправлен небольшой глючёк при инициализации
**************************************************************************************/


#pragma once
#include <ERRORS\ERRORS.h>			//чтобы корректно выводить ошибки

class CSimple_CheckBox_source
{
	bool m_value;					//значение параметра
	bool			m_bReadOnly;	// true		- значение нельзя менять в окне программы
									// false	- менять можно везде
public:
	CSimple_CheckBox_source();

	CButton			*m_source;		//указатель на источник

	bool			Set_value		(bool value);	//добавить очередное значение
	bool			ReadValueFromWindow(void);		//считывает значение из окна
	bool			Get_value();	//выдать значение переменной
	bool			Set_ReadOnly	(bool read_only);	//выставляет или снимает флаг "только чтение"

	//выставить одним махом все опции
	bool			SetAllValues(CButton* source,CString name,bool value);

	ERROR_Class		m_Error;		//структура с последней происшедшей ошибкой
	CString			m_sName;		//имя переменной

	//Для красоты
	bool			SetVisualisation (bool read_onli, bool isInt=false, bool PresCount=1, unsigned char height=10);
	//а это указатель на функцию, которая будет вызываться при поступлении
	//нового значения (конечно, если только указатель не нулевой)
	//сделана она для того, чтобы пользователь имел возможность 
	//провести какие-то дополнительный действия, сразу после обновления значения
	void			(*ComeNewValue)	(void);
};